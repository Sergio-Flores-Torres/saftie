import { GetSaftieAction, PostSaftieAction } from "wasp/server/api"; // This type is generated by Wasp based on the `api` declaration above.
import { ActionGetResponse, ActionPostResponse, createPostResponse } from "@solana/actions";

export const getSaftieAction: GetSaftieAction = async (req, res, context) => {
  res.set("Access-Control-Allow-Origin", "*"); // Example of modifying headers to override Wasp default CORS middleware.
  res.set("Access-Control-Allow-Methods", "GET,POST,PUT,OPTIONS"); 
  res.set("Access-Control-Allow-Headers", "Content-Type, Authorization, Content-Encoding, Accept-Encoding"); 

  const saftie = await context.entities.Saftie.findUnique({where:{id: req.params.id}});

  const actionResponse: ActionGetResponse = {
	icon: "https://saftie.saft.industries/src/client/static/saftie.png",
	title: "Saftie, frictionless Solana donation blinks",
	description: `Send a donation of ${saftie?.amount} USDC to address ${saftie?.address}`,
	label: "Send!",
  };

  res.json(actionResponse);
};

export const postSaftieAction: PostSaftieAction = async (req, res, context) => {
	res.set("Access-Control-Allow-Origin", "*"); // Example of modifying headers to override Wasp default CORS middleware.
	res.set("Access-Control-Allow-Methods", "GET,POST,PUT,OPTIONS"); 
	res.set("Access-Control-Allow-Headers", "Content-Type, Authorization, Content-Encoding, Accept-Encoding"); 
  
	const saftie = await context.entities.Saftie.findUnique({where:{id: req.params.id}});
	const senderAddress = req.body.account;

	// Assemble token transfer tx here
	// get the latest blockhash amd block height
	const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();

	// create a legacy transaction
	const transaction = new Transaction({
		feePayer: senderAddress,
		blockhash,
		lastValidBlockHeight,
	}).add(transferSolInstruction);

	const actionResponse = await createPostResponse({
        fields: {
          transaction,
          message: `Send a donation of ${saftie?.amount} USDC to address ${saftie?.address}`,
        },
        // note: no additional signers are needed
        // signers: [],
    });
  
	res.json(actionResponse);
  };